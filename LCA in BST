
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root or root == p or root == q)
        return root;
        TreeNode*left = lowestCommonAncestor(root->left,p,q);
        TreeNode*right = lowestCommonAncestor(root->right,p,q);
        if(!left)
        return right;
        if(!right)
        return left;
        return root;
    }
};





class Solution {
public:
    void solve(TreeNode* root, TreeNode* p, TreeNode* q,TreeNode*&ans)
    {
        if(root->val>p->val and root->val>q->val)
        solve(root->left,p,q,ans);
        else if(root->val<p->val and root->val<q->val)
        solve(root->right,p,q,ans);
        else            
        ans = root;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode*ans;
        solve(root,p,q,ans);
        return ans;
    }
};





class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL) return NULL;
        int x = root->val;
        if(x>p->val and x>q->val)
        return lowestCommonAncestor(root->left,p,q);
        else if(x<p->val and x<q->val)
        return lowestCommonAncestor(root->right,p,q);
        else
        return root;
    }
};
